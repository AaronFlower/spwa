Version 1.1
1、创建功能容器，为将html转换成js代码做好布局。
策略：
	我们将在单独的布局文档文件spa/layout.html中开发功能容器的HTML和css. 只有当把
	容器调整为我们喜欢的样式后，才把代码移至shell的css和js文件。这种做法通常是最快捷的，是
	开发初始布局的最高效方法，因为不用担心与大多数其它代码交互，就能进行工作。

Version 1.2
	我们创建布局文档layout.html是一个很好的基础。现在将在单页应用中使用它，第一步是：
	让Shell来渲染容器，而不是使用静态的HTML和CSS。
	1、将 html 转换成 JS
	
Version 1.3 
	Shell渲染并管理着功能容器。编写展开或收起聊天滑块的方法。
	我们需要它具有产品级的质量，但不用过度没计。下面是我们想要完成的需求。
	1）开发人员能够快速配置滑块的速度和高度。
	2）创建单个方法来展开或者收起聊天滑块。
	3）避免出现竞争条件(race condition)，即滑块可能同时在展开和收起。
	4）开发人员能够传入一个可选的回调函数，会在滑块运动结束时调用。
	5）创建测试代码，以便确保滑块的功能正常。

Version 1.4
	用户希望在聊天滑块上点击就能展开或者收起，下面是我们的需求。
	1）设置提示信息文字来提示用户操作，如：“Click to retract"
	2) 添加点击事件处理程序来调用toggleChat
	3) 将点击事件处理程序绑定到 jQuery 事件上。

Version 1.5 
	管理应用状态，选取一个策略来管理历史控件。
	为了确定事件引起的变化是否值得支持历史功能，我们要问自己以下三个问题。
	1）用户想把发生的变化添加为书签的愿望有多强烈？
	2）用户想恢复到发生变化之前的页面状态的愿望有多强烈？
	3）支持这一功能有多昂贵？
	比如：在线购物，用户点击后退按钮，回滚是非常困难的。

	我们希望始终让锚组件来驱动可书签化的应用状态。这能确保历史功能一直按预期工作。下面的伪代码概括了我们是如何来处理历史事件的：
	-- 当发生历史事件时，更改URI的锚组件，以便体现更改的状态。
		接收事件的处理程序调用shell的工具方法来改变锚。
		然后事件处理程序退出。
	-- Shell的hashchange事件处理程序注意到了 URI 变化并按它行事。
		将当前状态和新的锚表示的状态做比较。
		根据比较确定的结果，尝试更改需要修改的应用部分。
		如果不能处理请求的变化，则保持当前的状态，并恢复锚，以便和状态匹配。